import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout


(X_train, y_train), (X_test, y_test) = mnist.load_data()
X_train.shape , y_train.shape , X_test.shape , y_test.shape
def plot_input_img(i):
  plt.imshow(X_train[i] , cmap= 'binary')
  plt.title(y_train[i])
  plt.show()


for i in range(10):
    plot_input_img(i)


X_train = X_train.astype(np.float32)/255
X_test = X_test.astype(np.float32)/255
X_train = np.expand_dims(X_train, -1)
X_test = np.expand_dims(X_test, -1)
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)


model = Sequential()
model.add(Conv2D(32, (3,3), input_shape = (28,28,1), activation= 'relu') )
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(64, (3,3), activation= 'relu') )
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dropout(0.25))
model.add(Dense(10, activation="softmax"))


model.summary()


model.compile(optimizer= 'adam', loss = keras.losses.categorical_crossentropy, metrics=['accuracy'])


from keras.callbacks import EarlyStopping, ModelCheckpoint
es = EarlyStopping(monitor='val_accuracy', min_delta=0.01, patience=4, verbose=1, mode='max')
mc = ModelCheckpoint("./bestmodel.keras", monitor="val_accuracy", verbose=1, save_best_only=True)


his = model.fit(X_train, y_train, epochs=5, validation_split=0.3, callbacks= [es, mc])


model_S = keras.models.load_model("E://handwritten_recog//bestmodel.keras")


X_test = X_test.squeeze() # This removes dimensions of size 1
y_test = y_test[:,:,0]
score = model_S.evaluate(X_test[:10000], y_test)  # Use the first 10000 samples of X_test.
print(f"The model accuracy is {score[1]}")
